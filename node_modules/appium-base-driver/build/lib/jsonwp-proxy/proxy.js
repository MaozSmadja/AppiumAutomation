'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _jsonwpStatusStatus = require('../jsonwp-status/status');

var _protocolErrors = require('../protocol/errors');

var _basedriverDriver = require('../basedriver/driver');

var _basedriverDriver2 = _interopRequireDefault(_basedriverDriver);

var _protocolRoutes = require('../protocol/routes');

var _protocolConverter = require('./protocol-converter');

var _protocolConverter2 = _interopRequireDefault(_protocolConverter);

var log = _appiumSupport.logger.getLogger('JSONWP Proxy');
// TODO: Make this value configurable as a server side capability
var LOG_OBJ_LENGTH = 1024; // MAX LENGTH Logged to file / console
var DEFAULT_REQUEST_TIMEOUT = 240000;

var _BaseDriver$DRIVER_PROTOCOL = _basedriverDriver2['default'].DRIVER_PROTOCOL;
var MJSONWP = _BaseDriver$DRIVER_PROTOCOL.MJSONWP;
var W3C = _BaseDriver$DRIVER_PROTOCOL.W3C;

var JWProxy = (function () {
  function JWProxy() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, JWProxy);

    _Object$assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      timeout: DEFAULT_REQUEST_TIMEOUT
    }, opts);
    this.scheme = this.scheme.toLowerCase();
    this._activeRequests = [];
    this._downstreamProtocol = null;
    this.protocolConverter = new _protocolConverter2['default'](this.proxy.bind(this));
  }

  // abstract the call behind a member function
  // so that we can mock it in tests

  _createClass(JWProxy, [{
    key: 'request',
    value: function request() {
      var currentRequest,
          args$2$0 = arguments;
      return _regeneratorRuntime.async(function request$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            currentRequest = _requestPromise2['default'].apply(undefined, args$2$0);

            this._activeRequests.push(currentRequest);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(currentRequest['finally'](function () {
              return _lodash2['default'].pull(_this._activeRequests, currentRequest);
            }));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getActiveRequestsCount',
    value: function getActiveRequestsCount() {
      return this._activeRequests.length;
    }
  }, {
    key: 'cancelActiveRequests',
    value: function cancelActiveRequests() {
      try {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(this._activeRequests), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var r = _step.value;

            r.cancel();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } finally {
        this._activeRequests = [];
      }
    }
  }, {
    key: 'endpointRequiresSessionId',
    value: function endpointRequiresSessionId(endpoint) {
      return !_lodash2['default'].includes(['/session', '/sessions', '/status'], endpoint);
    }
  }, {
    key: 'getUrlForProxy',
    value: function getUrlForProxy(url) {
      if (url === '') {
        url = '/';
      }
      var proxyBase = this.scheme + '://' + this.server + ':' + this.port + this.base;
      var endpointRe = '(/(session|status))';
      var remainingUrl = '';
      if (/^http/.test(url)) {
        var first = new RegExp('(https?://.+)' + endpointRe).exec(url);
        if (!first) {
          throw new Error('Got a complete url but could not extract JWP endpoint');
        }
        remainingUrl = url.replace(first[1], '');
      } else if (new RegExp('^/').test(url)) {
        remainingUrl = url;
      } else {
        throw new Error('Did not know what to do with url \'' + url + '\'');
      }

      var stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');
      if (stripPrefixRe.test(remainingUrl)) {
        remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
      }

      if (!new RegExp(endpointRe).test(remainingUrl)) {
        remainingUrl = '/session/' + this.sessionId + remainingUrl;
      }

      var requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

      if (requiresSessionId && this.sessionId === null) {
        throw new Error('Trying to proxy a session command without session id');
      }

      var sessionBaseRe = new RegExp('^/session/([^/]+)');
      if (sessionBaseRe.test(remainingUrl)) {
        // we have something like /session/:id/foobar, so we need to replace
        // the session id
        var match = sessionBaseRe.exec(remainingUrl);
        remainingUrl = remainingUrl.replace(match[1], this.sessionId);
      } else if (requiresSessionId) {
        throw new Error('Could not find :session section for url: ' + remainingUrl);
      }
      remainingUrl = remainingUrl.replace(/\/$/, ''); // can't have trailing slashes

      return proxyBase + remainingUrl;
    }
  }, {
    key: 'proxy',
    value: function proxy(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
      var newUrl, reqOpts, res, resBody, resBodyObj, message, err, responseError;
      return _regeneratorRuntime.async(function proxy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            method = method.toUpperCase();
            newUrl = this.getUrlForProxy(url);
            reqOpts = {
              url: newUrl,
              method: method,
              headers: {
                'content-type': 'application/json; charset=utf-8',
                'user-agent': 'appium',
                accept: '*/*'
              },
              resolveWithFullResponse: true,
              timeout: this.timeout,
              forever: true
            };

            if (body !== null) {
              if (typeof body !== 'object') {
                body = JSON.parse(body);
              }
              reqOpts.json = body;
            }

            // GET methods shouldn't have any body. Most servers are OK with this, but WebDriverAgent throws 400 errors
            if (method === 'GET') {
              reqOpts.json = null;
            }

            log.debug('Proxying [' + method + ' ' + (url || "/") + '] to [' + method + ' ' + newUrl + '] ' + (body ? 'with body: ' + _lodash2['default'].truncate(JSON.stringify(body), { length: LOG_OBJ_LENGTH }) : 'with no body'));

            res = undefined, resBody = undefined;
            context$2$0.prev = 7;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.request(reqOpts));

          case 10:
            res = context$2$0.sent;

            resBody = res.body;
            log.debug('Got response with status ' + res.statusCode + ': ' + _lodash2['default'].truncate(JSON.stringify(resBody), { length: LOG_OBJ_LENGTH }));
            if (/\/session$/.test(url) && method === 'POST') {
              if (res.statusCode === 200) {
                this.sessionId = resBody.sessionId;
              } else if (res.statusCode === 303) {
                this.sessionId = /\/session\/([^\/]+)/.exec(resBody)[1];
              }
            }
            resBodyObj = _appiumSupport.util.safeJsonParse(resBody);

            if (!this.downstreamProtocol) {
              this.downstreamProtocol = this.getProtocolFromResBody(resBodyObj);
            }

            if (!(res.statusCode < 400 && this.downstreamProtocol === MJSONWP && parseInt(resBodyObj.status, 10) !== 0)) {
              context$2$0.next = 23;
              break;
            }

            message = 'The request to ' + url + ' has failed';
            err = new Error(message);

            err.message = message;
            err.error = resBody;
            err.statusCode = 500;
            throw err;

          case 23:
            context$2$0.next = 30;
            break;

          case 25:
            context$2$0.prev = 25;
            context$2$0.t0 = context$2$0['catch'](7);
            responseError = undefined;

            try {
              responseError = JSON.parse(context$2$0.t0.error);
            } catch (e1) {
              if (!_lodash2['default'].isEmpty(context$2$0.t0.error) && _lodash2['default'].isString(context$2$0.t0.error)) {
                log.warn('Got an unexpected response: ' + _lodash2['default'].truncate(context$2$0.t0.error, { length: 300 }));
              }
              responseError = _lodash2['default'].isPlainObject(context$2$0.t0.error) ? context$2$0.t0.error : null;
            }
            throw new _protocolErrors.errors.ProxyRequestError('Could not proxy command to remote server. ' + ('Original error: ' + context$2$0.t0.message), responseError, context$2$0.t0.statusCode);

          case 30:
            return context$2$0.abrupt('return', [res, resBody]);

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 25]]);
    }
  }, {
    key: 'getProtocolFromResBody',
    value: function getProtocolFromResBody(resBody) {
      if (!_lodash2['default'].isPlainObject(resBody)) {
        try {
          resBody = JSON.parse(resBody);
        } catch (err) {
          return;
        }
      }
      if (_appiumSupport.util.hasValue(resBody.status)) {
        return MJSONWP;
      }
      if (_appiumSupport.util.hasValue(resBody.value)) {
        return W3C;
      }
    }
  }, {
    key: 'requestToCommandName',
    value: function requestToCommandName(url, method) {
      var extractCommandName = function extractCommandName(pattern) {
        var pathMatch = pattern.exec(url);
        return pathMatch ? (0, _protocolRoutes.routeToCommandName)(pathMatch[1], method) : null;
      };
      var commandName = (0, _protocolRoutes.routeToCommandName)(url, method);
      if (!commandName && _lodash2['default'].includes(url, '/wd/hub/session/')) {
        commandName = extractCommandName(/\/wd\/hub\/session\/[^\/]+(.+)/);
      }
      if (!commandName && _lodash2['default'].includes(url, '/wd/hub/')) {
        commandName = extractCommandName(/\/wd\/hub(\/.+)/);
      }
      return commandName;
    }
  }, {
    key: 'proxyCommand',
    value: function proxyCommand(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
      var commandName;
      return _regeneratorRuntime.async(function proxyCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            commandName = this.requestToCommandName(url, method);

            if (commandName) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.proxy(url, method, body));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
            log.debug('Matched \'' + url + '\' to command name \'' + commandName + '\'');

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.protocolConverter.convertAndProxy(commandName, url, method, body));

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'command',
    value: function command(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var response, resBody, _ref, _ref2, protocol, _status, message;

      return _regeneratorRuntime.async(function command$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            response = undefined;
            resBody = undefined;
            context$2$0.prev = 2;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proxyCommand(url, method, body));

          case 5:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            response = _ref2[0];
            resBody = _ref2[1];
            context$2$0.next = 16;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](2);

            if (!(0, _protocolErrors.isErrorType)(context$2$0.t0, _protocolErrors.errors.ProxyRequestError)) {
              context$2$0.next = 15;
              break;
            }

            throw context$2$0.t0.getActualError();

          case 15:
            throw new _protocolErrors.errors.UnknownError(context$2$0.t0.message);

          case 16:
            resBody = _appiumSupport.util.safeJsonParse(resBody);
            protocol = this.getProtocolFromResBody(resBody);

            if (!(protocol === MJSONWP)) {
              context$2$0.next = 28;
              break;
            }

            if (!(response.statusCode === 200 && resBody.status === 0)) {
              context$2$0.next = 21;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 21:
            _status = parseInt(resBody.status, 10);

            if (!(!isNaN(_status) && _status !== 0)) {
              context$2$0.next = 26;
              break;
            }

            message = resBody.value;

            if (_lodash2['default'].has(resBody.value, 'message')) {
              message = _lodash2['default'].isEmpty(message) ? resBody.value.message : message + ' ' + resBody.value.message;
            }
            throw (0, _protocolErrors.errorFromMJSONWPStatusCode)(_status, _lodash2['default'].isEmpty(message) ? (0, _jsonwpStatusStatus.getSummaryByCode)(_status) : message);

          case 26:
            context$2$0.next = 37;
            break;

          case 28:
            if (!(protocol === W3C)) {
              context$2$0.next = 35;
              break;
            }

            if (!(response.statusCode < 300)) {
              context$2$0.next = 31;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 31:
            if (!(_lodash2['default'].isPlainObject(resBody.value) && resBody.value.error)) {
              context$2$0.next = 33;
              break;
            }

            throw (0, _protocolErrors.errorFromW3CJsonCode)(resBody.value.error, resBody.value.message, resBody.value.stacktrace);

          case 33:
            context$2$0.next = 37;
            break;

          case 35:
            if (!(response.statusCode === 200)) {
              context$2$0.next = 37;
              break;
            }

            return context$2$0.abrupt('return', resBody);

          case 37:
            throw new _protocolErrors.errors.UnknownError('Did not know what to do with response code \'' + response.statusCode + '\' ' + ('and response body \'' + _lodash2['default'].truncate(JSON.stringify(resBody), { length: 300 }) + '\''));

          case 38:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 11]]);
    }
  }, {
    key: 'getSessionIdFromUrl',
    value: function getSessionIdFromUrl(url) {
      var match = url.match(/\/session\/([^\/]+)/);
      return match ? match[1] : null;
    }
  }, {
    key: 'proxyReqRes',
    value: function proxyReqRes(req, res) {
      var _ref3, _ref32, response, body, reqSessionId;

      return _regeneratorRuntime.async(function proxyReqRes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxyCommand(req.originalUrl, req.method, req.body));

          case 2:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            response = _ref32[0];
            body = _ref32[1];

            res.headers = response.headers;
            res.set('content-type', response.headers['content-type']);
            // if the proxied response contains a sessionId that the downstream
            // driver has generated, we don't want to return that to the client.
            // Instead, return the id from the request or from current session
            body = _appiumSupport.util.safeJsonParse(body);
            if (body && body.sessionId) {
              reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

              if (reqSessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + reqSessionId);
                body.sessionId = reqSessionId;
              } else if (this.sessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + this.sessionId);
                body.sessionId = this.sessionId;
              }
            }
            res.status(response.statusCode).send(JSON.stringify(body));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'downstreamProtocol',
    set: function set(value) {
      this._downstreamProtocol = value;
      this.protocolConverter.downstreamProtocol = value;
    },
    get: function get() {
      return this._downstreamProtocol;
    }
  }]);

  return JWProxy;
})();

exports['default'] = JWProxy;
module.exports = exports['default'];

// Some servers, like chromedriver may return response code 200 for non-zero JSONWP statuses

// Got response in MJSONWP format

// Got response in W3C format

// Unknown protocol. Keeping it because of the backward compatibility
//# sourceMappingURL=data:application/json;charset=utf8;base64,
