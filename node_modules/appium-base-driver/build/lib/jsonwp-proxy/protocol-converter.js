'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _basedriverDriver = require('../basedriver/driver');

var _basedriverDriver2 = _interopRequireDefault(_basedriverDriver);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('Protocol Converter');

var COMMAND_URLS_CONFLICTS = [{
  commandNames: ['execute', 'executeAsync'],
  jsonwpConverter: function jsonwpConverter(url) {
    return url.replace(/\/execute.*/, url.includes('async') ? '/execute_async' : '/execute');
  },
  w3cConverter: function w3cConverter(url) {
    return url.replace(/\/execute.*/, url.includes('async') ? '/execute/async' : '/execute/sync');
  }
}, {
  commandNames: ['getElementScreenshot'],
  jsonwpConverter: function jsonwpConverter(url) {
    return url.replace(/\/element\/([^\/]+)\/screenshot$/, '/screenshot/$1');
  },
  w3cConverter: function w3cConverter(url) {
    return url.replace(/\/screenshot\/([^\/]+)/, '/element/$1/screenshot');
  }
}, {
  commandNames: ['getWindowHandles', 'getWindowHandle'],
  jsonwpConverter: function jsonwpConverter(url) {
    return url.replace(/\/window\/handle(s?)$/, '/window_handle$1');
  },
  w3cConverter: function w3cConverter(url) {
    return url.replace(/\/window_handle(s?)$/, '/window/handle$1');
  }
}];

var _BaseDriver$DRIVER_PROTOCOL = _basedriverDriver2['default'].DRIVER_PROTOCOL;
var MJSONWP = _BaseDriver$DRIVER_PROTOCOL.MJSONWP;
var W3C = _BaseDriver$DRIVER_PROTOCOL.W3C;

var ProtocolConverter = (function () {
  function ProtocolConverter(proxyFunc) {
    _classCallCheck(this, ProtocolConverter);

    this.proxyFunc = proxyFunc;
    this._downstreamProtocol = null;
  }

  _createClass(ProtocolConverter, [{
    key: 'getTimeoutRequestObjects',

    /**
     * W3C /timeouts can take as many as 3 timeout types at once, MJSONWP /timeouts only takes one
     * at a time. So if we're using W3C and proxying to MJSONWP and there's more than one timeout type
     * provided in the request, we need to do 3 proxies and combine the result
     *
     * @param {Object} body Request body
     * @return {Array} Array of W3C + MJSONWP compatible timeout objects
     */
    value: function getTimeoutRequestObjects(body) {
      var typeToW3C, _ret;

      return _regeneratorRuntime.async(function getTimeoutRequestObjects$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.downstreamProtocol === W3C && _lodash2['default'].has(body, 'ms') && _lodash2['default'].has(body, 'type'))) {
              context$2$0.next = 3;
              break;
            }

            typeToW3C = function typeToW3C(x) {
              return x === 'page load' ? 'pageLoad' : x;
            };

            return context$2$0.abrupt('return', [_defineProperty({}, typeToW3C(body.type), body.ms)]);

          case 3:
            if (!(this.downstreamProtocol === MJSONWP && (!_lodash2['default'].has(body, 'ms') || !_lodash2['default'].has(body, 'type')))) {
              context$2$0.next = 7;
              break;
            }

            _ret = (function () {
              var typeToJSONWP = function typeToJSONWP(x) {
                return x === 'pageLoad' ? 'page load' : x;
              };
              return {
                v: _lodash2['default'].toPairs(body).filter(function (pair) {
                  return !isNaN(parseFloat(pair[1]));
                }).map(function (pair) {
                  return {
                    type: typeToJSONWP(pair[0]),
                    ms: pair[1]
                  };
                })
              };
            })();

            if (!(typeof _ret === 'object')) {
              context$2$0.next = 7;
              break;
            }

            return context$2$0.abrupt('return', _ret.v);

          case 7:
            return context$2$0.abrupt('return', [body]);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Proxy an array of timeout objects and merge the result
     * @param {String} url Endpoint url
     * @param {String} method Endpoint method
     * @param {Object} body Request body
     */
  }, {
    key: 'proxySetTimeouts',
    value: function proxySetTimeouts(url, method, body) {
      var response, resBody, timeoutRequestObjects, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, timeoutObj, _ref2, _ref22;

      return _regeneratorRuntime.async(function proxySetTimeouts$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            response = undefined, resBody = undefined;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getTimeoutRequestObjects(body));

          case 3:
            timeoutRequestObjects = context$2$0.sent;

            log.debug('Will send the following request bodies to /timeouts: ' + JSON.stringify(timeoutRequestObjects));
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 8;
            _iterator = _getIterator(timeoutRequestObjects);

          case 10:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$2$0.next = 25;
              break;
            }

            timeoutObj = _step.value;
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.proxyFunc(url, method, timeoutObj));

          case 14:
            _ref2 = context$2$0.sent;
            _ref22 = _slicedToArray(_ref2, 2);
            response = _ref22[0];
            resBody = _ref22[1];

            if (!(this.downstreamProtocol !== MJSONWP)) {
              context$2$0.next = 20;
              break;
            }

            return context$2$0.abrupt('return', [response, resBody]);

          case 20:
            if (!(response.statusCode >= 400)) {
              context$2$0.next = 22;
              break;
            }

            return context$2$0.abrupt('return', [response, resBody]);

          case 22:
            _iteratorNormalCompletion = true;
            context$2$0.next = 10;
            break;

          case 25:
            context$2$0.next = 31;
            break;

          case 27:
            context$2$0.prev = 27;
            context$2$0.t0 = context$2$0['catch'](8);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 31:
            context$2$0.prev = 31;
            context$2$0.prev = 32;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 34:
            context$2$0.prev = 34;

            if (!_didIteratorError) {
              context$2$0.next = 37;
              break;
            }

            throw _iteratorError;

          case 37:
            return context$2$0.finish(34);

          case 38:
            return context$2$0.finish(31);

          case 39:
            return context$2$0.abrupt('return', [response, resBody]);

          case 40:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[8, 27, 31, 39], [32,, 34, 38]]);
    }
  }, {
    key: 'proxySetWindow',
    value: function proxySetWindow(url, method, body) {
      var bodyObj;
      return _regeneratorRuntime.async(function proxySetWindow$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            bodyObj = _appiumSupport.util.safeJsonParse(body);

            if (!_lodash2['default'].isPlainObject(bodyObj)) {
              context$2$0.next = 12;
              break;
            }

            if (!(this.downstreamProtocol === W3C && _lodash2['default'].has(bodyObj, 'name') && !_lodash2['default'].has(bodyObj, 'handle'))) {
              context$2$0.next = 7;
              break;
            }

            log.debug('Reassigned \'name\' value \'' + bodyObj.name + '\' to \'handle\' as per W3C spec');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.proxyFunc(url, method, { handle: bodyObj.name }));

          case 6:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
            if (!(this.downstreamProtocol === MJSONWP && _lodash2['default'].has(bodyObj, 'handle') && !_lodash2['default'].has(bodyObj, 'name'))) {
              context$2$0.next = 12;
              break;
            }

            log.debug('Reassigned \'handle\' value \'' + bodyObj.handle + '\' to \'name\' as per JSONWP spec');
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.proxyFunc(url, method, { name: bodyObj.handle }));

          case 11:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.proxyFunc(url, method, body));

          case 14:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Handle "crossing" endpoints for the case
     * when upstream and downstream drivers operate different protocols
     *
     * @param {string} commandName
     * @param {string} url
     * @param {string} method
     * @param {?string|object} body
     * @returns The proxyfying result as [response, responseBody] tuple
     */
  }, {
    key: 'convertAndProxy',
    value: function convertAndProxy(commandName, url, method, body) {
      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value,

      // Same arguments, but different URLs
      commandNames, jsonwpConverter, w3cConverter, rewrittenUrl;

      return _regeneratorRuntime.async(function convertAndProxy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.downstreamProtocol) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.proxyFunc(url, method, body));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
            context$2$0.t0 = commandName;
            context$2$0.next = context$2$0.t0 === 'timeouts' ? 7 : context$2$0.t0 === 'setWindow' ? 10 : 13;
            break;

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.proxySetTimeouts(url, method, body));

          case 9:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.proxySetWindow(url, method, body));

          case 12:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 13:
            return context$2$0.abrupt('break', 14);

          case 14:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 17;
            _iterator2 = _getIterator(COMMAND_URLS_CONFLICTS);

          case 19:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 37;
              break;
            }

            _step2$value = _step2.value;
            commandNames = _step2$value.commandNames;
            jsonwpConverter = _step2$value.jsonwpConverter;
            w3cConverter = _step2$value.w3cConverter;

            if (commandNames.includes(commandName)) {
              context$2$0.next = 26;
              break;
            }

            return context$2$0.abrupt('continue', 34);

          case 26:
            rewrittenUrl = this.downstreamProtocol === MJSONWP ? jsonwpConverter(url) : w3cConverter(url);

            if (!(rewrittenUrl === url)) {
              context$2$0.next = 30;
              break;
            }

            log.debug('Did not know how to rewrite the original URL \'' + url + '\' ' + ('for ' + this.downstreamProtocol + ' protocol'));
            return context$2$0.abrupt('break', 37);

          case 30:
            log.info('Rewrote the original URL \'' + url + '\' to \'' + rewrittenUrl + '\' ' + ('for ' + this.downstreamProtocol + ' protocol'));
            context$2$0.next = 33;
            return _regeneratorRuntime.awrap(this.proxyFunc(rewrittenUrl, method, body));

          case 33:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 34:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 19;
            break;

          case 37:
            context$2$0.next = 43;
            break;

          case 39:
            context$2$0.prev = 39;
            context$2$0.t1 = context$2$0['catch'](17);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t1;

          case 43:
            context$2$0.prev = 43;
            context$2$0.prev = 44;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 46:
            context$2$0.prev = 46;

            if (!_didIteratorError2) {
              context$2$0.next = 49;
              break;
            }

            throw _iteratorError2;

          case 49:
            return context$2$0.finish(46);

          case 50:
            return context$2$0.finish(43);

          case 51:
            context$2$0.next = 53;
            return _regeneratorRuntime.awrap(this.proxyFunc(url, method, body));

          case 53:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 54:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[17, 39, 43, 51], [44,, 46, 50]]);
    }
  }, {
    key: 'downstreamProtocol',
    set: function set(value) {
      this._downstreamProtocol = value;
    },
    get: function get() {
      return this._downstreamProtocol;
    }
  }]);

  return ProtocolConverter;
})();

exports['default'] = ProtocolConverter;
module.exports = exports['default'];

// If we got a non-MJSONWP response, return the result, nothing left to do

// If we got an error, return the error right away

// ...Otherwise, continue to the next timeouts call

// There is no point to convert anything if we do not know
// for which protocol the conversion should be done

// Same url, but different arguments

// No matches found. Proceed normally
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9qc29ud3AtcHJveHkvcHJvdG9jb2wtY29udmVydGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7Z0NBQ0Msc0JBQXNCOzs7OzZCQUNoQixnQkFBZ0I7O0FBRTdDLElBQU0sR0FBRyxHQUFHLHNCQUFPLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDOztBQUduRCxJQUFNLHNCQUFzQixHQUFHLENBQzdCO0FBQ0UsY0FBWSxFQUFFLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQztBQUN6QyxpQkFBZSxFQUFFLHlCQUFDLEdBQUc7V0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFDakQsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxnQkFBZ0IsR0FBRyxVQUFVLENBQUM7R0FBQTtBQUN4RCxjQUFZLEVBQUUsc0JBQUMsR0FBRztXQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUM5QyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztHQUFBO0NBQzlELEVBQ0Q7QUFDRSxjQUFZLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztBQUN0QyxpQkFBZSxFQUFFLHlCQUFDLEdBQUc7V0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLGtDQUFrQyxFQUN0RSxnQkFBZ0IsQ0FBQztHQUFBO0FBQ25CLGNBQVksRUFBRSxzQkFBQyxHQUFHO1dBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFDekQsd0JBQXdCLENBQUM7R0FBQTtDQUM1QixFQUNEO0FBQ0UsY0FBWSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsaUJBQWlCLENBQUM7QUFDckQsaUJBQWUsRUFBRSx5QkFBQyxHQUFHO1dBQUssR0FBRyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFDM0Qsa0JBQWtCLENBQUM7R0FBQTtBQUNyQixjQUFZLEVBQUUsc0JBQUMsR0FB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QUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztLQUNqQzs7O1NBWkcsaUJBQWlCOzs7cUJBNklSLGlCQUFpQiIsImZpbGUiOiJsaWIvanNvbndwLXByb3h5L3Byb3RvY29sLWNvbnZlcnRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQmFzZURyaXZlciBmcm9tICcuLi9iYXNlZHJpdmVyL2RyaXZlcic7XG5pbXBvcnQgeyBsb2dnZXIsIHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1Byb3RvY29sIENvbnZlcnRlcicpO1xuXG5cbmNvbnN0IENPTU1BTkRfVVJMU19DT05GTElDVFMgPSBbXG4gIHtcbiAgICBjb21tYW5kTmFtZXM6IFsnZXhlY3V0ZScsICdleGVjdXRlQXN5bmMnXSxcbiAgICBqc29ud3BDb252ZXJ0ZXI6ICh1cmwpID0+IHVybC5yZXBsYWNlKC9cXC9leGVjdXRlLiovLFxuICAgICAgdXJsLmluY2x1ZGVzKCdhc3luYycpID8gJy9leGVjdXRlX2FzeW5jJyA6ICcvZXhlY3V0ZScpLFxuICAgIHczY0NvbnZlcnRlcjogKHVybCkgPT4gdXJsLnJlcGxhY2UoL1xcL2V4ZWN1dGUuKi8sXG4gICAgICB1cmwuaW5jbHVkZXMoJ2FzeW5jJykgPyAnL2V4ZWN1dGUvYXN5bmMnIDogJy9leGVjdXRlL3N5bmMnKSxcbiAgfSxcbiAge1xuICAgIGNvbW1hbmROYW1lczogWydnZXRFbGVtZW50U2NyZWVuc2hvdCddLFxuICAgIGpzb253cENvbnZlcnRlcjogKHVybCkgPT4gdXJsLnJlcGxhY2UoL1xcL2VsZW1lbnRcXC8oW15cXC9dKylcXC9zY3JlZW5zaG90JC8sXG4gICAgICAnL3NjcmVlbnNob3QvJDEnKSxcbiAgICB3M2NDb252ZXJ0ZXI6ICh1cmwpID0+IHVybC5yZXBsYWNlKC9cXC9zY3JlZW5zaG90XFwvKFteXFwvXSspLyxcbiAgICAgICcvZWxlbWVudC8kMS9zY3JlZW5zaG90JyksXG4gIH0sXG4gIHtcbiAgICBjb21tYW5kTmFtZXM6IFsnZ2V0V2luZG93SGFuZGxlcycsICdnZXRXaW5kb3dIYW5kbGUnXSxcbiAgICBqc29ud3BDb252ZXJ0ZXI6ICh1cmwpID0+IHVybC5yZXBsYWNlKC9cXC93aW5kb3dcXC9oYW5kbGUocz8pJC8sXG4gICAgICAnL3dpbmRvd19oYW5kbGUkMScpLFxuICAgIHczY0NvbnZlcnRlcjogKHVybCkgPT4gdXJsLnJlcGxhY2UoL1xcL3dpbmRvd19oYW5kbGUocz8pJC8sXG4gICAgICAnL3dpbmRvdy9oYW5kbGUkMScpLFxuICB9LFxuXTtcblxuY29uc3Qge01KU09OV1AsIFczQ30gPSBCYXNlRHJpdmVyLkRSSVZFUl9QUk9UT0NPTDtcblxuXG5jbGFzcyBQcm90b2NvbENvbnZlcnRlciB7XG4gIGNvbnN0cnVjdG9yIChwcm94eUZ1bmMpIHtcbiAgICB0aGlzLnByb3h5RnVuYyA9IHByb3h5RnVuYztcbiAgICB0aGlzLl9kb3duc3RyZWFtUHJvdG9jb2wgPSBudWxsO1xuICB9XG5cbiAgc2V0IGRvd25zdHJlYW1Qcm90b2NvbCAodmFsdWUpIHtcbiAgICB0aGlzLl9kb3duc3RyZWFtUHJvdG9jb2wgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBkb3duc3RyZWFtUHJvdG9jb2wgKCkge1xuICAgIHJldHVybiB0aGlzLl9kb3duc3RyZWFtUHJvdG9jb2w7XG4gIH1cblxuICAvKipcbiAgICogVzNDIC90aW1lb3V0cyBjYW4gdGFrZSBhcyBtYW55IGFzIDMgdGltZW91dCB0eXBlcyBhdCBvbmNlLCBNSlNPTldQIC90aW1lb3V0cyBvbmx5IHRha2VzIG9uZVxuICAgKiBhdCBhIHRpbWUuIFNvIGlmIHdlJ3JlIHVzaW5nIFczQyBhbmQgcHJveHlpbmcgdG8gTUpTT05XUCBhbmQgdGhlcmUncyBtb3JlIHRoYW4gb25lIHRpbWVvdXQgdHlwZVxuICAgKiBwcm92aWRlZCBpbiB0aGUgcmVxdWVzdCwgd2UgbmVlZCB0byBkbyAzIHByb3hpZXMgYW5kIGNvbWJpbmUgdGhlIHJlc3VsdFxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYm9keSBSZXF1ZXN0IGJvZHlcbiAgICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIFczQyArIE1KU09OV1AgY29tcGF0aWJsZSB0aW1lb3V0IG9iamVjdHNcbiAgICovXG4gIGFzeW5jIGdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyAoYm9keSkge1xuICAgIGlmICh0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCA9PT0gVzNDICYmIF8uaGFzKGJvZHksICdtcycpICYmIF8uaGFzKGJvZHksICd0eXBlJykpIHtcbiAgICAgIGNvbnN0IHR5cGVUb1czQyA9ICh4KSA9PiB4ID09PSAncGFnZSBsb2FkJyA/ICdwYWdlTG9hZCcgOiB4O1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIFt0eXBlVG9XM0MoYm9keS50eXBlKV06IGJvZHkubXMsXG4gICAgICB9XTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5kb3duc3RyZWFtUHJvdG9jb2wgPT09IE1KU09OV1AgJiYgKCFfLmhhcyhib2R5LCAnbXMnKSB8fCAhXy5oYXMoYm9keSwgJ3R5cGUnKSkpIHtcbiAgICAgIGNvbnN0IHR5cGVUb0pTT05XUCA9ICh4KSA9PiB4ID09PSAncGFnZUxvYWQnID8gJ3BhZ2UgbG9hZCcgOiB4O1xuICAgICAgcmV0dXJuIF8udG9QYWlycyhib2R5KVxuICAgICAgICAuZmlsdGVyKChwYWlyKSA9PiAhaXNOYU4ocGFyc2VGbG9hdChwYWlyWzFdKSkpXG4gICAgICAgIC5tYXAoKHBhaXIpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogdHlwZVRvSlNPTldQKHBhaXJbMF0pLFxuICAgICAgICAgICAgbXM6IHBhaXJbMV0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtib2R5XTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm94eSBhbiBhcnJheSBvZiB0aW1lb3V0IG9iamVjdHMgYW5kIG1lcmdlIHRoZSByZXN1bHRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBFbmRwb2ludCB1cmxcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBFbmRwb2ludCBtZXRob2RcbiAgICogQHBhcmFtIHtPYmplY3R9IGJvZHkgUmVxdWVzdCBib2R5XG4gICAqL1xuICBhc3luYyBwcm94eVNldFRpbWVvdXRzICh1cmwsIG1ldGhvZCwgYm9keSkge1xuICAgIGxldCByZXNwb25zZSwgcmVzQm9keTtcblxuICAgIGNvbnN0IHRpbWVvdXRSZXF1ZXN0T2JqZWN0cyA9IGF3YWl0IHRoaXMuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKGJvZHkpO1xuICAgIGxvZy5kZWJ1ZyhgV2lsbCBzZW5kIHRoZSBmb2xsb3dpbmcgcmVxdWVzdCBib2RpZXMgdG8gL3RpbWVvdXRzOiAke0pTT04uc3RyaW5naWZ5KHRpbWVvdXRSZXF1ZXN0T2JqZWN0cyl9YCk7XG4gICAgZm9yIChjb25zdCB0aW1lb3V0T2JqIG9mIHRpbWVvdXRSZXF1ZXN0T2JqZWN0cykge1xuICAgICAgW3Jlc3BvbnNlLCByZXNCb2R5XSA9IGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCB0aW1lb3V0T2JqKTtcblxuICAgICAgLy8gSWYgd2UgZ290IGEgbm9uLU1KU09OV1AgcmVzcG9uc2UsIHJldHVybiB0aGUgcmVzdWx0LCBub3RoaW5nIGxlZnQgdG8gZG9cbiAgICAgIGlmICh0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCAhPT0gTUpTT05XUCkge1xuICAgICAgICByZXR1cm4gW3Jlc3BvbnNlLCByZXNCb2R5XTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UgZ290IGFuIGVycm9yLCByZXR1cm4gdGhlIGVycm9yIHJpZ2h0IGF3YXlcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID49IDQwMCkge1xuICAgICAgICByZXR1cm4gW3Jlc3BvbnNlLCByZXNCb2R5XTtcbiAgICAgIH1cblxuICAgICAgLy8gLi4uT3RoZXJ3aXNlLCBjb250aW51ZSB0byB0aGUgbmV4dCB0aW1lb3V0cyBjYWxsXG4gICAgfVxuICAgIHJldHVybiBbcmVzcG9uc2UsIHJlc0JvZHldO1xuICB9XG5cbiAgYXN5bmMgcHJveHlTZXRXaW5kb3cgKHVybCwgbWV0aG9kLCBib2R5KSB7XG4gICAgY29uc3QgYm9keU9iaiA9IHV0aWwuc2FmZUpzb25QYXJzZShib2R5KTtcbiAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGJvZHlPYmopKSB7XG4gICAgICBpZiAodGhpcy5kb3duc3RyZWFtUHJvdG9jb2wgPT09IFczQyAmJiBfLmhhcyhib2R5T2JqLCAnbmFtZScpICYmICFfLmhhcyhib2R5T2JqLCAnaGFuZGxlJykpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBSZWFzc2lnbmVkICduYW1lJyB2YWx1ZSAnJHtib2R5T2JqLm5hbWV9JyB0byAnaGFuZGxlJyBhcyBwZXIgVzNDIHNwZWNgKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCB7aGFuZGxlOiBib2R5T2JqLm5hbWV9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCA9PT0gTUpTT05XUCAmJiBfLmhhcyhib2R5T2JqLCAnaGFuZGxlJykgJiYgIV8uaGFzKGJvZHlPYmosICduYW1lJykpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBSZWFzc2lnbmVkICdoYW5kbGUnIHZhbHVlICcke2JvZHlPYmouaGFuZGxlfScgdG8gJ25hbWUnIGFzIHBlciBKU09OV1Agc3BlY2ApO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUZ1bmModXJsLCBtZXRob2QsIHtuYW1lOiBib2R5T2JqLmhhbmRsZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3h5RnVuYyh1cmwsIG1ldGhvZCwgYm9keSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIFwiY3Jvc3NpbmdcIiBlbmRwb2ludHMgZm9yIHRoZSBjYXNlXG4gICAqIHdoZW4gdXBzdHJlYW0gYW5kIGRvd25zdHJlYW0gZHJpdmVycyBvcGVyYXRlIGRpZmZlcmVudCBwcm90b2NvbHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmROYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgKiBAcGFyYW0gez9zdHJpbmd8b2JqZWN0fSBib2R5XG4gICAqIEByZXR1cm5zIFRoZSBwcm94eWZ5aW5nIHJlc3VsdCBhcyBbcmVzcG9uc2UsIHJlc3BvbnNlQm9keV0gdHVwbGVcbiAgICovXG4gIGFzeW5jIGNvbnZlcnRBbmRQcm94eSAoY29tbWFuZE5hbWUsIHVybCwgbWV0aG9kLCBib2R5KSB7XG4gICAgaWYgKCF0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCkge1xuICAgICAgLy8gVGhlcmUgaXMgbm8gcG9pbnQgdG8gY29udmVydCBhbnl0aGluZyBpZiB3ZSBkbyBub3Qga25vd1xuICAgICAgLy8gZm9yIHdoaWNoIHByb3RvY29sIHRoZSBjb252ZXJzaW9uIHNob3VsZCBiZSBkb25lXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUZ1bmModXJsLCBtZXRob2QsIGJvZHkpO1xuICAgIH1cblxuICAgIC8vIFNhbWUgdXJsLCBidXQgZGlmZmVyZW50IGFyZ3VtZW50c1xuICAgIHN3aXRjaCAoY29tbWFuZE5hbWUpIHtcbiAgICAgIGNhc2UgJ3RpbWVvdXRzJzpcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlTZXRUaW1lb3V0cyh1cmwsIG1ldGhvZCwgYm9keSk7XG4gICAgICBjYXNlICdzZXRXaW5kb3cnOlxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eVNldFdpbmRvdyh1cmwsIG1ldGhvZCwgYm9keSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvLyBTYW1lIGFyZ3VtZW50cywgYnV0IGRpZmZlcmVudCBVUkxzXG4gICAgZm9yIChjb25zdCB7Y29tbWFuZE5hbWVzLCBqc29ud3BDb252ZXJ0ZXIsIHczY0NvbnZlcnRlcn0gb2YgQ09NTUFORF9VUkxTX0NPTkZMSUNUUykge1xuICAgICAgaWYgKCFjb21tYW5kTmFtZXMuaW5jbHVkZXMoY29tbWFuZE5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXdyaXR0ZW5VcmwgPSB0aGlzLmRvd25zdHJlYW1Qcm90b2NvbCA9PT0gTUpTT05XUFxuICAgICAgICA/IGpzb253cENvbnZlcnRlcih1cmwpXG4gICAgICAgIDogdzNjQ29udmVydGVyKHVybCk7XG4gICAgICBpZiAocmV3cml0dGVuVXJsID09PSB1cmwpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBEaWQgbm90IGtub3cgaG93IHRvIHJld3JpdGUgdGhlIG9yaWdpbmFsIFVSTCAnJHt1cmx9JyBgICtcbiAgICAgICAgICBgZm9yICR7dGhpcy5kb3duc3RyZWFtUHJvdG9jb2x9IHByb3RvY29sYCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbG9nLmluZm8oYFJld3JvdGUgdGhlIG9yaWdpbmFsIFVSTCAnJHt1cmx9JyB0byAnJHtyZXdyaXR0ZW5Vcmx9JyBgICtcbiAgICAgICAgYGZvciAke3RoaXMuZG93bnN0cmVhbVByb3RvY29sfSBwcm90b2NvbGApO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlGdW5jKHJld3JpdHRlblVybCwgbWV0aG9kLCBib2R5KTtcbiAgICB9XG5cbiAgICAvLyBObyBtYXRjaGVzIGZvdW5kLiBQcm9jZWVkIG5vcm1hbGx5XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlGdW5jKHVybCwgbWV0aG9kLCBib2R5KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm90b2NvbENvbnZlcnRlcjtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
