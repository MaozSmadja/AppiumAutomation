'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _protocol = require('../../protocol');

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var _capabilities = require('../capabilities');

var commands = {};

commands.createSession = function callee$0$0(jsonwpDesiredCapabilities, jsonwpRequiredCaps, w3cCapabilities) {
  var caps;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(this.sessionId !== null)) {
          context$1$0.next = 2;
          break;
        }

        throw new _protocol.errors.SessionNotCreatedError('Cannot create a new session ' + 'while one is in progress');

      case 2:

        _logger2['default'].debug();

        // Determine weather we should use jsonwpDesiredCapabilities or w3cCapabilities to get caps from
        caps = undefined;

        if (w3cCapabilities) {
          this.setProtocolW3C();
          if (jsonwpDesiredCapabilities) {
            _logger2['default'].debug('W3C capabilities ' + _lodash2['default'].truncate(JSON.stringify(w3cCapabilities)) + ' and MJSONWP desired capabilities ' + _lodash2['default'].truncate(JSON.stringify(jsonwpDesiredCapabilities)) + ' were provided');
          }

          if (jsonwpDesiredCapabilities && !_lodash2['default'].isPlainObject(w3cCapabilities)) {
            // If W3C Capabilities and MJSONWP Capabilities were provided and W3C caps aren't a plain object,
            // log a warning and fall back to MJSONWP
            if (!_lodash2['default'].isEmpty(w3cCapabilities)) {
              _logger2['default'].warn('Expected W3C "capabilities" to be a JSON Object but was provided with: ' + JSON.stringify(w3cCapabilities));
            }
            _logger2['default'].warn('Falling back to MJSONWP desired capabilities');
            this.setProtocolMJSONWP();
            caps = jsonwpDesiredCapabilities;
          } else {
            _logger2['default'].debug('Creating session with W3C capabilities: ' + _lodash2['default'].truncate(JSON.stringify(w3cCapabilities)));
            caps = (0, _capabilities.processCapabilities)(w3cCapabilities, this.desiredCapConstraints, this.shouldValidateCaps);
          }
        } else {
          this.setProtocolMJSONWP();
          _logger2['default'].debug('Creating session with MJSONWP desired capabilities: ' + _lodash2['default'].truncate(JSON.stringify(jsonwpDesiredCapabilities)));
          caps = jsonwpDesiredCapabilities || {};
        }

        caps = fixCaps(caps, this.desiredCapConstraints);
        this.validateDesiredCaps(caps);

        this.sessionId = _uuidJs2['default'].create().hex;
        this.caps = caps;
        this.opts = _lodash2['default'].cloneDeep(this.initialOpts);

        // merge caps onto opts so we don't need to worry about what's where
        _Object$assign(this.opts, this.caps);

        // deal with resets
        // some people like to do weird things by setting noReset and fullReset
        // both to true, but this is misguided and strange, so error here instead

        if (!(this.opts.noReset && this.opts.fullReset)) {
          context$1$0.next = 13;
          break;
        }

        throw new Error("The 'noReset' and 'fullReset' capabilities are mutually " + "exclusive and should not both be set to true. You " + "probably meant to just use 'fullReset' on its own");

      case 13:
        if (this.opts.noReset === true) {
          this.opts.fullReset = false;
        }
        if (this.opts.fullReset === true) {
          this.opts.noReset = false;
        }
        this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
        this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

        // Prevents empty string caps so we don't need to test it everywhere
        if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {
          this.opts.app = null;
        }

        if (!_lodash2['default'].isUndefined(this.caps.newCommandTimeout)) {
          this.newCommandTimeoutMs = this.caps.newCommandTimeout * 1000;
        }

        // We need to ininitialize one onUnexpectedShutdow promise per session
        // to avoid the promise fulfilment being propagated between sessions.
        this.resetOnUnexpectedShutdown();

        _logger2['default'].info('Session created with session id: ' + this.sessionId);

        return context$1$0.abrupt('return', [this.sessionId, caps]);

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSessions = function callee$0$0() {
  var ret;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ret = [];

        if (this.sessionId) {
          ret.push({
            id: this.sessionId,
            capabilities: this.caps
          });
        }

        return context$1$0.abrupt('return', ret);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSession = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.caps.eventTimings) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return', _Object$assign({}, this.caps, { events: this.eventHistory }));

      case 2:
        return context$1$0.abrupt('return', this.caps);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.deleteSession = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.clearNewCommandTimeout();
        this.sessionId = null;

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function fixCaps(originalCaps) {
  var desiredCapConstraints = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var caps = _lodash2['default'].clone(originalCaps);

  // boolean capabilities can be passed in as strings 'false' and 'true'
  // which we want to translate into boolean values
  var booleanCaps = _lodash2['default'].keys(_lodash2['default'].pickBy(desiredCapConstraints, function (k) {
    return k.isBoolean === true;
  }));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(booleanCaps), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cap = _step.value;

      var value = originalCaps[cap];
      if (_lodash2['default'].isString(value)) {
        value = value.toLowerCase();
        if (value === 'true' || value === 'false') {
          _logger2['default'].warn('Capability \'' + cap + '\' changed from string to boolean. This may cause unexpected behavior');
          caps[cap] = value === 'true';
        }
      }
    }

    // int capabilities are often sent in as strings by frameworks
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var intCaps = _lodash2['default'].keys(_lodash2['default'].pickBy(desiredCapConstraints, function (k) {
    return k.isNumber === true;
  }));
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(intCaps), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var cap = _step2.value;

      var value = originalCaps[cap];
      if (_lodash2['default'].isString(value)) {
        var newValue = parseInt(value, 10);
        if (value.indexOf('.') !== -1) {
          newValue = parseFloat(value);
        }
        _logger2['default'].warn('Capability \'' + cap + '\' changed from string (\'' + value + '\') to integer (' + newValue + '). This may cause unexpected behavior');
        caps[cap] = newValue;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return caps;
}

exports['default'] = commands;
module.exports = exports['default'];
/* sessionId */
//# sourceMappingURL=data:application/json;charset=utf8;base64,
