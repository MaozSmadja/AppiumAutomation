require('source-map-support').install();

/* global describe:true, it:true */

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libJsonwpProxyProtocolConverter = require('../../lib/jsonwp-proxy/protocol-converter');

var _libJsonwpProxyProtocolConverter2 = _interopRequireDefault(_libJsonwpProxyProtocolConverter);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libBasedriverDriver = require('../../lib/basedriver/driver');

var _libBasedriverDriver2 = _interopRequireDefault(_libBasedriverDriver);

var _BaseDriver$DRIVER_PROTOCOL = _libBasedriverDriver2['default'].DRIVER_PROTOCOL;
var MJSONWP = _BaseDriver$DRIVER_PROTOCOL.MJSONWP;
var W3C = _BaseDriver$DRIVER_PROTOCOL.W3C;

_chai2['default'].use(_chaiAsPromised2['default']);

describe('Protocol Converter', function () {
  describe('getTimeoutRequestObjects', function () {
    var converter = undefined;
    before(function () {
      converter = new _libJsonwpProxyProtocolConverter2['default'](_lodash2['default'].noop);
    });
    it('should take W3C inputs and produce MJSONWP compatible objects', function callee$2$0() {
      var timeoutObjects;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            converter.downstreamProtocol = MJSONWP;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(converter.getTimeoutRequestObjects({ script: 100 }));

          case 3:
            timeoutObjects = context$3$0.sent;

            timeoutObjects.length.should.equal(1);
            timeoutObjects[0].should.eql({ type: 'script', ms: 100 });

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should take multiple W3C timeouts and produce multiple MJSONWP compatible objects', function callee$2$0() {
      var _ref, _ref2, scriptTimeout, pageLoadTimeout, implicitTimeout;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            converter.downstreamProtocol = MJSONWP;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(converter.getTimeoutRequestObjects({ script: 100, pageLoad: 200, implicit: 300 }));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 3);
            scriptTimeout = _ref2[0];
            pageLoadTimeout = _ref2[1];
            implicitTimeout = _ref2[2];

            scriptTimeout.should.eql({
              type: 'script',
              ms: 100
            });
            pageLoadTimeout.should.eql({
              type: 'page load',
              ms: 200
            });
            implicitTimeout.should.eql({
              type: 'implicit',
              ms: 300
            });

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should take MJSONWP input and produce W3C compatible object', function callee$2$0() {
      var timeoutObjects;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            converter.downstreamProtocol = W3C;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(converter.getTimeoutRequestObjects({ type: 'implicit', ms: 300 }));

          case 3:
            timeoutObjects = context$3$0.sent;

            timeoutObjects.length.should.equal(1);
            timeoutObjects[0].should.eql({ implicit: 300 });

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not change the input if protocol name is unknown', function callee$2$0() {
      var timeoutObjects;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            converter.downstreamProtocol = null;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(converter.getTimeoutRequestObjects({ type: 'implicit', ms: 300 }));

          case 3:
            timeoutObjects = context$3$0.sent;

            timeoutObjects.length.should.equal(1);
            timeoutObjects[0].should.eql({ type: 'implicit', ms: 300 });

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should not change the input if protocol name is unchanged', function callee$2$0() {
      var timeoutObjects;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            converter.downstreamProtocol = MJSONWP;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(converter.getTimeoutRequestObjects({ type: 'implicit', ms: 300 }));

          case 3:
            timeoutObjects = context$3$0.sent;

            timeoutObjects.length.should.equal(1);
            timeoutObjects[0].should.eql({ type: 'implicit', ms: 300 });

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvanNvbndwLXByb3h5L3Byb3RvY29sLWNvbnZlcnRlci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztzQkFHYyxRQUFROzs7OytDQUNRLDJDQUEyQzs7OztvQkFDeEQsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7bUNBQ3RCLDZCQUE2Qjs7OztrQ0FFN0IsaUNBQVcsZUFBZTtJQUExQyxPQUFPLCtCQUFQLE9BQU87SUFBRSxHQUFHLCtCQUFILEdBQUc7O0FBRW5CLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFZO0FBQ3pDLFVBQVEsQ0FBQywwQkFBMEIsRUFBRSxZQUFZO0FBQy9DLFFBQUksU0FBUyxZQUFBLENBQUM7QUFDZCxVQUFNLENBQUMsWUFBWTtBQUNqQixlQUFTLEdBQUcsaURBQXNCLG9CQUFFLElBQUksQ0FBQyxDQUFDO0tBQzNDLENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQywrREFBK0QsRUFBRTtVQUU5RCxjQUFjOzs7O0FBRGxCLHFCQUFTLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDOzs2Q0FDWixTQUFTLENBQUMsd0JBQXdCLENBQUMsRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLENBQUM7OztBQUF4RSwwQkFBYzs7QUFDbEIsMEJBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QywwQkFBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDOzs7Ozs7O0tBQ3pELENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQyxtRkFBbUYsRUFBRTt1QkFFakYsYUFBYSxFQUFFLGVBQWUsRUFBRSxlQUFlOzs7OztBQURwRCxxQkFBUyxDQUFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQzs7NkNBQ3VCLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFDLENBQUM7Ozs7O0FBQXhJLHlCQUFhO0FBQUUsMkJBQWU7QUFBRSwyQkFBZTs7QUFDcEQseUJBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ3ZCLGtCQUFJLEVBQUUsUUFBUTtBQUNkLGdCQUFFLEVBQUUsR0FBRzthQUNSLENBQUMsQ0FBQztBQUNILDJCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUN6QixrQkFBSSxFQUFFLFdBQVc7QUFDakIsZ0JBQUUsRUFBRSxHQUFHO2FBQ1IsQ0FBQyxDQUFDO0FBQ0gsMkJBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ3pCLGtCQUFJLEVBQUUsVUFBVTtBQUNoQixnQkFBRSxFQUFFLEdBQUc7YUFDUixDQUFDLENBQUM7Ozs7Ozs7S0FDSixDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMsNkRBQTZELEVBQUU7VUFFNUQsY0FBYzs7OztBQURsQixxQkFBUyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQzs7NkNBQ1IsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFDLENBQUM7OztBQUF0RiwwQkFBYzs7QUFDbEIsMEJBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QywwQkFBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxRQUFRLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQzs7Ozs7OztLQUMvQyxDQUFDLENBQUM7QUFDSCxNQUFFLENBQUMseURBQXlELEVBQUU7VUFFeEQsY0FBYzs7OztBQURsQixxQkFBUyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQzs7NkNBQ1QsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFDLENBQUM7OztBQUF0RiwwQkFBYzs7QUFDbEIsMEJBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QywwQkFBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDOzs7Ozs7O0tBQzNELENBQUMsQ0FBQztBQUNILE1BQUUsQ0FBQywyREFBMkQsRUFBRTtVQUUxRCxjQUFjOzs7O0FBRGxCLHFCQUFTLENBQUMsa0JBQWtCLEdBQUcsT0FBTyxDQUFDOzs2Q0FDWixTQUFTLENBQUMsd0JBQXdCLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUMsQ0FBQzs7O0FBQXRGLDBCQUFjOztBQUNsQiwwQkFBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLDBCQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7Ozs7Ozs7S0FDM0QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvanNvbndwLXByb3h5L3Byb3RvY29sLWNvbnZlcnRlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxyXG4vKiBnbG9iYWwgZGVzY3JpYmU6dHJ1ZSwgaXQ6dHJ1ZSAqL1xyXG5cclxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcclxuaW1wb3J0IFByb3RvY29sQ29udmVydGVyIGZyb20gJy4uLy4uL2xpYi9qc29ud3AtcHJveHkvcHJvdG9jb2wtY29udmVydGVyJztcclxuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XHJcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcclxuaW1wb3J0IEJhc2VEcml2ZXIgZnJvbSAnLi4vLi4vbGliL2Jhc2Vkcml2ZXIvZHJpdmVyJztcclxuXHJcbmNvbnN0IHtNSlNPTldQLCBXM0N9ID0gQmFzZURyaXZlci5EUklWRVJfUFJPVE9DT0w7XHJcblxyXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XHJcblxyXG5kZXNjcmliZSgnUHJvdG9jb2wgQ29udmVydGVyJywgZnVuY3Rpb24gKCkge1xyXG4gIGRlc2NyaWJlKCdnZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgY29udmVydGVyO1xyXG4gICAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29udmVydGVyID0gbmV3IFByb3RvY29sQ29udmVydGVyKF8ubm9vcCk7XHJcbiAgICB9KTtcclxuICAgIGl0KCdzaG91bGQgdGFrZSBXM0MgaW5wdXRzIGFuZCBwcm9kdWNlIE1KU09OV1AgY29tcGF0aWJsZSBvYmplY3RzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gTUpTT05XUDtcclxuICAgICAgbGV0IHRpbWVvdXRPYmplY3RzID0gYXdhaXQgY29udmVydGVyLmdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyh7c2NyaXB0OiAxMDB9KTtcclxuICAgICAgdGltZW91dE9iamVjdHMubGVuZ3RoLnNob3VsZC5lcXVhbCgxKTtcclxuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ3NjcmlwdCcsIG1zOiAxMDB9KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3Nob3VsZCB0YWtlIG11bHRpcGxlIFczQyB0aW1lb3V0cyBhbmQgcHJvZHVjZSBtdWx0aXBsZSBNSlNPTldQIGNvbXBhdGlibGUgb2JqZWN0cycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29udmVydGVyLmRvd25zdHJlYW1Qcm90b2NvbCA9IE1KU09OV1A7XHJcbiAgICAgIGxldCBbc2NyaXB0VGltZW91dCwgcGFnZUxvYWRUaW1lb3V0LCBpbXBsaWNpdFRpbWVvdXRdID0gYXdhaXQgY29udmVydGVyLmdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyh7c2NyaXB0OiAxMDAsIHBhZ2VMb2FkOiAyMDAsIGltcGxpY2l0OiAzMDB9KTtcclxuICAgICAgc2NyaXB0VGltZW91dC5zaG91bGQuZXFsKHtcclxuICAgICAgICB0eXBlOiAnc2NyaXB0JyxcclxuICAgICAgICBtczogMTAwLFxyXG4gICAgICB9KTtcclxuICAgICAgcGFnZUxvYWRUaW1lb3V0LnNob3VsZC5lcWwoe1xyXG4gICAgICAgIHR5cGU6ICdwYWdlIGxvYWQnLFxyXG4gICAgICAgIG1zOiAyMDAsXHJcbiAgICAgIH0pO1xyXG4gICAgICBpbXBsaWNpdFRpbWVvdXQuc2hvdWxkLmVxbCh7XHJcbiAgICAgICAgdHlwZTogJ2ltcGxpY2l0JyxcclxuICAgICAgICBtczogMzAwLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3Nob3VsZCB0YWtlIE1KU09OV1AgaW5wdXQgYW5kIHByb2R1Y2UgVzNDIGNvbXBhdGlibGUgb2JqZWN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gVzNDO1xyXG4gICAgICBsZXQgdGltZW91dE9iamVjdHMgPSBhd2FpdCBjb252ZXJ0ZXIuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKHt0eXBlOiAnaW1wbGljaXQnLCBtczogMzAwfSk7XHJcbiAgICAgIHRpbWVvdXRPYmplY3RzLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XHJcbiAgICAgIHRpbWVvdXRPYmplY3RzWzBdLnNob3VsZC5lcWwoe2ltcGxpY2l0OiAzMDB9KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3Nob3VsZCBub3QgY2hhbmdlIHRoZSBpbnB1dCBpZiBwcm90b2NvbCBuYW1lIGlzIHVua25vd24nLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnZlcnRlci5kb3duc3RyZWFtUHJvdG9jb2wgPSBudWxsO1xyXG4gICAgICBsZXQgdGltZW91dE9iamVjdHMgPSBhd2FpdCBjb252ZXJ0ZXIuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKHt0eXBlOiAnaW1wbGljaXQnLCBtczogMzAwfSk7XHJcbiAgICAgIHRpbWVvdXRPYmplY3RzLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XHJcbiAgICAgIHRpbWVvdXRPYmplY3RzWzBdLnNob3VsZC5lcWwoe3R5cGU6ICdpbXBsaWNpdCcsIG1zOiAzMDB9KTtcclxuICAgIH0pO1xyXG4gICAgaXQoJ3Nob3VsZCBub3QgY2hhbmdlIHRoZSBpbnB1dCBpZiBwcm90b2NvbCBuYW1lIGlzIHVuY2hhbmdlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29udmVydGVyLmRvd25zdHJlYW1Qcm90b2NvbCA9IE1KU09OV1A7XHJcbiAgICAgIGxldCB0aW1lb3V0T2JqZWN0cyA9IGF3YWl0IGNvbnZlcnRlci5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoe3R5cGU6ICdpbXBsaWNpdCcsIG1zOiAzMDB9KTtcclxuICAgICAgdGltZW91dE9iamVjdHMubGVuZ3RoLnNob3VsZC5lcXVhbCgxKTtcclxuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ2ltcGxpY2l0JywgbXM6IDMwMH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
