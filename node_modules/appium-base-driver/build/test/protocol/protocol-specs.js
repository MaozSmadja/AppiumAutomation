require('source-map-support').install();

'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

require('../..');

// NOTE: For some reason this file needs to be imported to prevent a babel error

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libProtocolProtocol = require('../../lib/protocol/protocol');

var _libBasedriverDriver = require('../../lib/basedriver/driver');

var _libBasedriverDriver2 = _interopRequireDefault(_libBasedriverDriver);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Protocol', function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:

        describe('#driverShouldDoJwpProxy', function () {
          it('should not proxy if an image element is found in request url', function () {
            var d = new _libBasedriverDriver2['default']();
            _sinon2['default'].stub(d, 'proxyActive').returns(true);
            _sinon2['default'].stub(d, 'proxyRouteIsAvoided').returns(false);
            var hasImageElements = ['/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar', '/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar/click', '/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar/submit', '/wd/hub/session/:sessionId/screenshot/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'];
            var noImageElements = ['/wd/hub/session/:sessionId/element/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, '/wd/hub/session/:sessionId/screenshot/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, '/wd/hub/session/:sessionId/element/bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, '/wd/hub/session/:sessionId/element/element123', '/wd/hub/session/:sessionId/title', '/wd/hub/session/:sessionId/notelement/' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _getIterator(hasImageElements), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var testCase = _step.value;

                var req = { body: {}, params: {}, originalUrl: testCase };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['false'];
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = _getIterator(noImageElements), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var testCase = _step2.value;

                var req = { body: {}, params: {}, originalUrl: testCase };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['true'];
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          });
          it('should not proxy if an image element is found in request body', function () {
            var d = new _libBasedriverDriver2['default']();
            _sinon2['default'].stub(d, 'proxyActive').returns(true);
            _sinon2['default'].stub(d, 'proxyRouteIsAvoided').returns(false);
            var hasImageElements = [_defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'), _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'foo'), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar')];
            var noImageElements = [_defineProperty({}, _libProtocolProtocol.IMAGE_ELEMENT_PREFIX, 'foo'), _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, '' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, '' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX), {
              foo: 'bar'
            }, _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, 'bar'), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, 'bar'), {
              foo: _libProtocolProtocol.IMAGE_ELEMENT_PREFIX + 'bar'
            }, {
              foo: 'bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX
            }, _defineProperty({}, _libProtocolProtocol.W3C_ELEMENT_KEY, 'bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX), _defineProperty({}, _libProtocolProtocol.MJSONWP_ELEMENT_KEY, 'bar' + _libProtocolProtocol.IMAGE_ELEMENT_PREFIX)];
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = _getIterator(hasImageElements), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var testCase = _step3.value;

                var req = { body: testCase, params: {} };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['false'];
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                  _iterator3['return']();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = _getIterator(noImageElements), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var testCase = _step4.value;

                var req = { body: testCase, params: {} };
                (0, _libProtocolProtocol.driverShouldDoJwpProxy)(d, req, null).should.be['true'];
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                  _iterator4['return']();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          });
        });

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcHJvdG9jb2wvcHJvdG9jb2wtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O1FBRU8sT0FBTzs7OztvQkFDRyxNQUFNOzs7O3FCQUNMLE9BQU87Ozs7OEJBQ0Usa0JBQWtCOzs7O21DQUNzRCw2QkFBNkI7O21DQUN6Ryw2QkFBNkI7Ozs7QUFFcEQsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsVUFBVSxFQUFFOzs7OztBQUVuQixnQkFBUSxDQUFDLHlCQUF5QixFQUFFLFlBQVk7QUFDOUMsWUFBRSxDQUFDLDhEQUE4RCxFQUFFLFlBQVk7QUFDN0UsZ0JBQU0sQ0FBQyxHQUFHLHNDQUFnQixDQUFDO0FBQzNCLCtCQUFNLElBQUksQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNDLCtCQUFNLElBQUksQ0FBQyxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEQsZ0JBQU0sZ0JBQWdCLEdBQUcsNFhBS3hCLENBQUM7QUFDRixnQkFBTSxlQUFlLEdBQUcsZ1FBSXRCLCtDQUErQyxFQUMvQyxrQ0FBa0MsK0ZBRW5DLENBQUM7Ozs7OztBQUNGLGdEQUFxQixnQkFBZ0IsNEdBQUU7b0JBQTlCLFFBQVE7O0FBQ2Ysb0JBQU0sR0FBRyxHQUFHLEVBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUMsQ0FBQztBQUMxRCxpRUFBdUIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxTQUFNLENBQUM7ZUFDdEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNELGlEQUFxQixlQUFlLGlIQUFFO29CQUE3QixRQUFROztBQUNmLG9CQUFNLEdBQUcsR0FBRyxFQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFDLENBQUM7QUFDMUQsaUVBQXVCLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO2VBQ3JEOzs7Ozs7Ozs7Ozs7Ozs7V0FDRixDQUFDLENBQUM7QUFDSCxZQUFFLENBQUMsK0RBQStELEVBQUUsWUFBWTtBQUM5RSxnQkFBTSxDQUFDLEdBQUcsc0NBQWdCLENBQUM7QUFDM0IsK0JBQU0sSUFBSSxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0MsK0JBQU0sSUFBSSxDQUFDLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwRCxnQkFBTSxnQkFBZ0IsR0FBRyw4VUFNdkIsQ0FBQztBQUNILGdCQUFNLGVBQWUsR0FBRyxnRUFDRSxLQUFLLDZOQUs1QjtBQUNELGlCQUFHLEVBQUUsS0FBSzthQUNYLDREQUNvQixLQUFLLGlFQUVELEtBQUssR0FDM0I7QUFDRCxpQkFBRyxtREFBOEI7YUFDbEMsRUFBRTtBQUNELGlCQUFHLG1EQUE4QjthQUNsQyxpT0FJQyxDQUFDOzs7Ozs7QUFDSCxpREFBcUIsZ0JBQWdCLGlIQUFFO29CQUE5QixRQUFROztBQUNmLG9CQUFNLEdBQUcsR0FBRyxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQyxDQUFDO0FBQ3pDLGlFQUF1QixDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQU0sQ0FBQztlQUN0RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0QsaURBQXFCLGVBQWUsaUhBQUU7b0JBQTdCLFFBQVE7O0FBQ2Ysb0JBQU0sR0FBRyxHQUFHLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFDekMsaUVBQXVCLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO2VBQ3JEOzs7Ozs7Ozs7Ozs7Ozs7V0FFRixDQUFDLENBQUM7U0FDSixDQUFDLENBQUM7Ozs7Ozs7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9wcm90b2NvbC9wcm90b2NvbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgJy4uLy4uJzsgLy8gTk9URTogRm9yIHNvbWUgcmVhc29uIHRoaXMgZmlsZSBuZWVkcyB0byBiZSBpbXBvcnRlZCB0byBwcmV2ZW50IGEgYmFiZWwgZXJyb3JcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IE1KU09OV1BfRUxFTUVOVF9LRVksIFczQ19FTEVNRU5UX0tFWSwgZHJpdmVyU2hvdWxkRG9Kd3BQcm94eSwgSU1BR0VfRUxFTUVOVF9QUkVGSVggfSBmcm9tICcuLi8uLi9saWIvcHJvdG9jb2wvcHJvdG9jb2wnO1xuaW1wb3J0IEJhc2VEcml2ZXIgZnJvbSAnLi4vLi4vbGliL2Jhc2Vkcml2ZXIvZHJpdmVyJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ1Byb3RvY29sJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gIGRlc2NyaWJlKCcjZHJpdmVyU2hvdWxkRG9Kd3BQcm94eScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIG5vdCBwcm94eSBpZiBhbiBpbWFnZSBlbGVtZW50IGlzIGZvdW5kIGluIHJlcXVlc3QgdXJsJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBCYXNlRHJpdmVyKCk7XG4gICAgICBzaW5vbi5zdHViKGQsICdwcm94eUFjdGl2ZScpLnJldHVybnModHJ1ZSk7XG4gICAgICBzaW5vbi5zdHViKGQsICdwcm94eVJvdXRlSXNBdm9pZGVkJykucmV0dXJucyhmYWxzZSk7XG4gICAgICBjb25zdCBoYXNJbWFnZUVsZW1lbnRzID0gW1xuICAgICAgICBgL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvZWxlbWVudC8ke0lNQUdFX0VMRU1FTlRfUFJFRklYfWJhcmAsXG4gICAgICAgIGAvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50LyR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9YmFyL2NsaWNrYCxcbiAgICAgICAgYC93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvJHtJTUFHRV9FTEVNRU5UX1BSRUZJWH1iYXIvc3VibWl0YCxcbiAgICAgICAgYC93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL3NjcmVlbnNob3QvJHtJTUFHRV9FTEVNRU5UX1BSRUZJWH1iYXJgLFxuICAgICAgXTtcbiAgICAgIGNvbnN0IG5vSW1hZ2VFbGVtZW50cyA9IFtcbiAgICAgICAgYC93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvJHtJTUFHRV9FTEVNRU5UX1BSRUZJWH1gLFxuICAgICAgICBgL3dkL2h1Yi9zZXNzaW9uLzpzZXNzaW9uSWQvc2NyZWVuc2hvdC8ke0lNQUdFX0VMRU1FTlRfUFJFRklYfWAsXG4gICAgICAgIGAvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9lbGVtZW50L2JhciR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9YCxcbiAgICAgICAgJy93ZC9odWIvc2Vzc2lvbi86c2Vzc2lvbklkL2VsZW1lbnQvZWxlbWVudDEyMycsXG4gICAgICAgICcvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC90aXRsZScsXG4gICAgICAgIGAvd2QvaHViL3Nlc3Npb24vOnNlc3Npb25JZC9ub3RlbGVtZW50LyR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9YmFyYCxcbiAgICAgIF07XG4gICAgICBmb3IgKGxldCB0ZXN0Q2FzZSBvZiBoYXNJbWFnZUVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHtib2R5OiB7fSwgcGFyYW1zOiB7fSwgb3JpZ2luYWxVcmw6IHRlc3RDYXNlfTtcbiAgICAgICAgZHJpdmVyU2hvdWxkRG9Kd3BQcm94eShkLCByZXEsIG51bGwpLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IHRlc3RDYXNlIG9mIG5vSW1hZ2VFbGVtZW50cykge1xuICAgICAgICBjb25zdCByZXEgPSB7Ym9keToge30sIHBhcmFtczoge30sIG9yaWdpbmFsVXJsOiB0ZXN0Q2FzZX07XG4gICAgICAgIGRyaXZlclNob3VsZERvSndwUHJveHkoZCwgcmVxLCBudWxsKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBwcm94eSBpZiBhbiBpbWFnZSBlbGVtZW50IGlzIGZvdW5kIGluIHJlcXVlc3QgYm9keScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgICAgc2lub24uc3R1YihkLCAncHJveHlBY3RpdmUnKS5yZXR1cm5zKHRydWUpO1xuICAgICAgc2lub24uc3R1YihkLCAncHJveHlSb3V0ZUlzQXZvaWRlZCcpLnJldHVybnMoZmFsc2UpO1xuICAgICAgY29uc3QgaGFzSW1hZ2VFbGVtZW50cyA9IFt7XG4gICAgICAgIFtXM0NfRUxFTUVOVF9LRVldOiBgJHtJTUFHRV9FTEVNRU5UX1BSRUZJWH1iYXJgLFxuICAgICAgfSwge1xuICAgICAgICBbVzNDX0VMRU1FTlRfS0VZXTogYCR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9Zm9vYCxcbiAgICAgIH0sIHtcbiAgICAgICAgW01KU09OV1BfRUxFTUVOVF9LRVldOiBgJHtJTUFHRV9FTEVNRU5UX1BSRUZJWH1iYXJgLFxuICAgICAgfV07XG4gICAgICBjb25zdCBub0ltYWdlRWxlbWVudHMgPSBbe1xuICAgICAgICBbSU1BR0VfRUxFTUVOVF9QUkVGSVhdOiAnZm9vJyxcbiAgICAgIH0sIHtcbiAgICAgICAgW1czQ19FTEVNRU5UX0tFWV06IGAke0lNQUdFX0VMRU1FTlRfUFJFRklYfWAsXG4gICAgICB9LCB7XG4gICAgICAgIFtNSlNPTldQX0VMRU1FTlRfS0VZXTogYCR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9YCxcbiAgICAgIH0sIHtcbiAgICAgICAgZm9vOiAnYmFyJyxcbiAgICAgIH0sIHtcbiAgICAgICAgW1czQ19FTEVNRU5UX0tFWV06ICdiYXInLFxuICAgICAgfSwge1xuICAgICAgICBbTUpTT05XUF9FTEVNRU5UX0tFWV06ICdiYXInLFxuICAgICAgfSwge1xuICAgICAgICBmb286IGAke0lNQUdFX0VMRU1FTlRfUFJFRklYfWJhcmAsXG4gICAgICB9LCB7XG4gICAgICAgIGZvbzogYGJhciR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9YFxuICAgICAgfSwge1xuICAgICAgICBbVzNDX0VMRU1FTlRfS0VZXTogYGJhciR7SU1BR0VfRUxFTUVOVF9QUkVGSVh9YFxuICAgICAgfSwge1xuICAgICAgICBbTUpTT05XUF9FTEVNRU5UX0tFWV06IGBiYXIke0lNQUdFX0VMRU1FTlRfUFJFRklYfWBcbiAgICAgIH1dO1xuICAgICAgZm9yIChsZXQgdGVzdENhc2Ugb2YgaGFzSW1hZ2VFbGVtZW50cykge1xuICAgICAgICBjb25zdCByZXEgPSB7Ym9keTogdGVzdENhc2UsIHBhcmFtczoge319O1xuICAgICAgICBkcml2ZXJTaG91bGREb0p3cFByb3h5KGQsIHJlcSwgbnVsbCkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgdGVzdENhc2Ugb2Ygbm9JbWFnZUVsZW1lbnRzKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IHtib2R5OiB0ZXN0Q2FzZSwgcGFyYW1zOiB7fX07XG4gICAgICAgIGRyaXZlclNob3VsZERvSndwUHJveHkoZCwgcmVxLCBudWxsKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
